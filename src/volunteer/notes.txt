LINUX:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
sudo apt-get install php5
sudo apt-get install mysql / sudo apt-get install mysql-client-core-5.5 / sudo apt-get install mysql-client mysql-server
sudo apt-get install php5-mysql
service httpd restart
sudo /etc/init.d/apache2 stop
sudo service apache2 restart
...




SQL:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
mysql -u USER -p
> PASSWORD
mysql -u USER -h localhost -p'PASSWORD'

create user 'richie'@'localhost' identified by 'qwerty';
drop user 'richie'@'localhost';
grant all privileges on * . * to 'richie'@'localhost';
flush privileges;

...

mysql -h localhost -u richie -p'qwerty';

create database volunteering;
use volunteering;

create table users(id int not null auto_increment primary, username varchar(32) not null, password varchar(2048) not null)
alter table users 

show databases;
use DATABASE;
show tables;

TYPES: int, bigint, float, double, date (YYYY-MM-DD), datetime (YYYY-MM-DD HH:MM:SS.fraction), timestamp (YYYY-MM-DD HH:MM:SS - seconds), varchar(0-65535), text(~2^16), mediumtext(2^24), longtext (2^32), 


foriegn key - not used importantly
CREATE TABLE department (id NOT NULL)
CREATE TABLE employee (id NOT NULL, dept_id NOT NULL, FOREIGN KEY (dept_id) REFERENCES department(id))

default
ALTER TABLE `table`  ADD COLUMN `column` FLOAT(10,2) NOT NULL DEFAULT '0.00'

drop table users;


























insert into users (username, password) values ("richie","123");
select * from users;

----------------------
mysql -h localhost -u richie -p'qwerty'
create database volunteering;
use volunteering;
show tables;

alter table users

----------------------
# DROP ALL TABLES
drop table users;
drop table emails;
drop table emails;
drop table emails;
drop table emails;
drop table emails;
# USERS
create table users(
id int not null auto_increment primary key,
group_id int,
session varchar(2048),
created datetime,
modified datetime,
username varchar(32) not null,
password varchar(2048) not null,
first_name: varchar(32),
last_name: varchar(32),
email varchar(64) not null,
phone varchar(32),
title varchar(255),
city varchar(64),
state varchar(64),
zip varchar(16),
photo varchar(255),
session_id varchar(2048),
preferences varchar(2048) #k1=v1,k2=v2,... showfirstname=1,showlastname=0,timezone=+8,
);
# EMPLOYERS
create table employers(
id int not null auto_increment primary key,
name varchar(255)
);
# EMERGENCY_CONTACTS
create table emergency_contacts(
id int not null auto_increment primary key,
name varchar(255)
);
# POSITIONS
create table positions(
id int not null auto_increment primary key,
info varchar(2048),
location varchar(64)
);
# SHIFTS
create table shifts(
id int not null auto_increment primary key,
parent_id int,
user_id int,
position_id int,
log_begin datetime,
log_end datetime,
time_begin datetime,
time_end datetime,
algorithm varchar(2048)
);
# PERMISSIONS
create table permissions(
id int not null auto_increment primary key,
name varchar(32),
info varchar(1024)
);
# GROUPS
create table groups(
id int not null auto_increment primary key,
name varchar(32),
info varchar(1024)
);
# EMAILS
create table emails(
id int not null auto_increment primary key,
user_id int not null,
name varchar(64),
template text
);
# FAKE DATA
insert into groups (name, info) values ("admin","god");
insert into groups (name, info) values ("staff","staff member");
insert into groups (name, info) values ("volunteer","by-the-by");
insert into users (username, password, email, first_name, last_name, phone, title, state, city, zip, group_id, created, modified) values ("richie","123","zirbsster@gmail.com", "Richie", "Zirbes", "555-555-5555", "software dude", "CO", "Boulder", "12345", (select id from groups where name="volunteer"), now(), now() );
insert into users (username, password, email, group_id) values ("smith","qwe","bacon@bacon.com", (select id from groups where name="staff") );
insert into users (username, password, email, group_id) values ("tareva","123","joeboxes@gmail.com", (select id from groups where name="admin") );
# DROP ALL TABLES
drop table users;
drop table employers;
drop table emergency_contacts;
drop table positions;
drop table shifts;
drop table permissions;
drop table groups;
drop table emails;


============SHIFT-PARENT==============
id: 123
parent_id: 0
user_id: 0
position_id: 4
log_begin: NULL
log_end: NULL
time_begin: 2013-07-13 00:00:00.0000
time_end: 2013-08-15 24:00:00.0000
algorithm: M:06:00:00.0000-08:30:00.0000&12:30:00.0000-3:00:00.0000,T,W,R,F:06:00:00.0000-08:00:00.0000,S,U


============SHIFT-CHILD-01==============
id: 124
parent_id: 123
user_id: 18
position_id: 4
log_begin: 2013-07-13 05:55:56.1234
log_end: 2013-07-13 08:31:06.4321
time_begin: 2013-07-13 06:00:00.0000
time_end: 2013-07-13 08:30:00.0000
algorithm: NULL


separate algorithm by comma => array of days
remove beginning Letter+Colon, separate day by ampersand => array of times
separate times by dash => start time and end time


SHIFT ACTIONS:
- assign shift to user
	- only assign single shift based on id to user_id
- assign a 'set of shifts' to user
	- assign all unassigned shifts based on parent_id to user_id
- unassign shift to user
	- only unassign user_id based on id
- unassign a 'set of shifts' to user
	- unassign all signed shifts based on parent_id from user_id
- add 'one-time' cover-shift to a different user
	- (same as assign shift)
- delete a single shift
	- delete shift based on id
	- delete parent if no more child-shifts exist
- delete a 'set of shifts'
	- delete all shifts based on parent_id
	- delete parent shift
- alter a single shift
	- change start/end time accordingly
- alter a 'set of shifts'
	- delete all shifts where user is not already assigned (in the future)
	- add brand new set of shifts (even if )



* user cannot own a parent shift, only sub-shifts
* once a shift has been logged (begin and end), it can only be deleted/modified EXPLICTELY
* 

------------------------------------------------------------------------------------------------
exceptions: NULL


 | Calendar | Users | Positions | Shifts | Permissions | Groups | Emails | 




 +---------------------------------------------+
 |                    - 18 -                   |
 +---------------------------------------------+
 |   HELP WANTED - Dorm Supply 6:00AM-8:00AM   |
 +---------------------------------------------+
 |      HELP WANTED - Linens 5:30PM-7:00PM     |
 +---------------------------------------------+
 |    HELP WANTED - Dinner 1 5:00PM-7:00PM     |
 +---------------------------------------------+
 |       Richie - Dinner 2 5:00PM-7:00PM       |
 +---------------------------------------------+
 |        John - Dinner 3 5:00PM-7:00PM        |
 +---------------------------------------------+
 |     Maxamillion - Dinner 4 5:00PM-7:00PM    |
 +---------------------------------------------+
 |                                             |
 |                                             |
 |                                             |
 |                                             |
 |                                             |
 +---------------------------------------------+

 +---------------------------------------------+
 |                 Previous                    |
 +---------------------------------------------+
 |    Dinner - May 15, 2013  5:00PM-7:00PM     |
 +---------------------------------------------+
 |                   Next                      |
 +---------------------------------------------+
 |  Dorm Supply - May 21, 2013  5:00PM-7:00PM  |
 +---------------------------------------------+


?a=calendar&s=1234567890&h=###########
?




 +---------------------------------------------+
 |                                             |
 |                                             |
 |         Please log into your shift          |
 |                                             |
 |        First Name [               ]         |
 |         Last Name [               ]         |
 |                                             |
 |                   [ OK ]                    |
 |                  [ Reset ]                  |
 |                                             |
 +---------------------------------------------+ 
 Check for all un-logged shifts starting/stopping within 1-2 hours from current time
 +---------------------------------------------+
 |                                             |
 |           Please verify your shift          |
 |                                             |
 |                Richie Zirbes                |
 |         Dorm Supply 5:00PM - 7:00PM         |
 |                                             |
 |                 [ Confirm ]                 |
 |                                             |
 |                 [ Cancel ]                  |
 |                                             |
 +---------------------------------------------+ 
 Check for all un-logged shifts starting within 1 hour of previous shift finish time
 +---------------------------------------------+
 |                                             |
 |   It appears you also have another shift.   |
 |   Would you like to log in for this too?    |
 |                                             |
 |         Dorm Supply 7:00PM - 8:30PM         |
 |                                             |
 |                   [ Yes ]                   |
 |                                             |
 |                   [ No ]                    |
 |                                             |
 +---------------------------------------------+
If no shifts are found (assigned to user) => show list of all shifts within the next day (and minus a few hours of current time)
If no user is found => refresh to login page with error "User not found"



PERMISSIONS:

ADMIN:
USERS_CREATE
USERS_READ
USERS_UPDATE
USERS_DELETE
EMAIL_SEND
SHIFT_CREATE

TERMINAL:
LOGIN_SCREEN


USER:





1024 bits / 4 = 256 chars
256 bits / 4 = 64 chars
         1         2         3         4         5         6
1234567890123456789012345678901234567890123456789012345678901234567890
0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF




NEW TABLE DESIGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
# DROP ALL TABLES
drop table if exists users;
drop table if exists sessions;
drop table if exists groups;
drop table if exists shifts;
drop table if exists requests;
# USERS
create table users(
id int not null auto_increment primary key,
group_id int,
created datetime,
modified datetime,
username varchar(32) not null,
password varchar(1024) not null,
first_name varchar(32),
last_name varchar(32),
email varchar(64) not null,
phone varchar(32),
city varchar(64),
state varchar(64),
zip varchar(16),
preferences varchar(2048) #k1=v1,k2=v2,... showfirstname=1,showlastname=0,timezone=+8,
);
#SESSIONS
create table sessions(
id int not null auto_increment primary key,
user_id int,
ip_remote varchar(32),
ip_forward varchar(32),
session_id varchar(64) #0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
);
# GROUPS
create table groups(
id int not null auto_increment primary key,
name varchar(32),
info varchar(1024)
);
# SHIFTS
create table shifts(
id int not null auto_increment primary key,
parent_id int,
user_id int,
position_id int,
log_begin datetime,
log_end datetime,
time_begin datetime,
time_end datetime,
algorithm varchar(2048)
);
# REQUESTS
create table requests(
id int not null auto_increment primary key,
created datetime,
modified datetime,	# final approved/rejected date
shift_id int,
request_user_id int,
fulfill_user_id int,
approved_user_id int, # admin
info varchar(1024) # request reasoning/explanation
status int # 0=open, 1=closed
);

# INSERT FAKE DATA
insert into groups (name, info) values ("admin","CRUD - everything");
insert into groups (name, info) values ("staff","staff member");
insert into users (username, password, email, first_name, last_name, phone, state, city, zip, group_id, created, modified) values ("richie","qwerty","zirbsster@gmail.com", "Richie", "Zirbes", "555-555-5555", "CO", "Boulder", "12345", (select id from groups where name="admin"), now(), now() );



insert into sessions (user_id,session_id) values ("12","0123456789");




REQUEST:
1) CREATE REQUEST
	- requestee & shift
2) FULFILL REQUEST
	- requester
3) APPROVE REQUEST
	- admin
A) DELETE REQUEST
	- admin 









select * from users where modified >'2013-09-03';

SELECT * FROM players WHERE DATE(us_reg_date) BETWEEN '2000-07-05' AND '2011-11-10'

SELECT * FROM players WHERE us_reg_date >= '2000-07-05' AND us_reg_date < '2011-11-10' + interval 1 day

select * from players where  us_reg_date between '2000-07-05' and DATE_ADD('2011-11-10',INTERVAL 1 DAY)


TODO-----------
x cookies
x autogenerate shifts from algorithm text
send email
large calendar
medium calendar
mini calendar
vertical calendar
layout/design - individual pages
integrate php + js + sql tables via server interface
viewing pages
editing/updating pages
deleting
login screen